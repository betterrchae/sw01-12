Index: app/Model/Board.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.Model;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport app.Model.Enum.BoardType;\nimport app.Model.Enum.YutResult;\nimport app.Model.Horse.Horse;\n\npublic class Board {\n  private final BoardType type;\n  private final List<Spot> spots;\n  private final List<Line> lines;\n  private final List<Path> paths;\n  private final Spot startSpot;\n  private final Spot finishSpot;\n  private final Map<Integer, List<Horse>> horsePositions;\n\n  public Board(BoardType type, List<Spot> spots, List<Line> lines, List<Path> paths) {\n    this.type = type;\n    this.spots = new ArrayList<>(spots);\n    this.lines = new ArrayList<>(lines);\n    this.paths = new ArrayList<>(paths);\n    this.horsePositions = new HashMap<>();\n\n    // 시작 지점과 도착 지점 설정\n    Spot start = null;\n    Spot finish = null;\n    for (Spot spot : spots) {\n      if (spot.isStart()) {\n        start = spot;\n      }\n      if (spot.isFinish()) {\n        finish = spot;\n      }\n    }\n\n    this.startSpot = start;\n    this.finishSpot = finish;\n\n    confirmBackdoConnections();\n  }\n\n  private void confirmBackdoConnections() {\n    for (Spot spot : spots) {\n      // Spot 클래스에 이미 setPrevSpot이 호출되었는지 확인\n      if (spot.getPrevSpot() == null && !spot.isStart()) {\n        // 이 칸이 다른 칸의 다음 칸인지 확인\n        for (Spot other : spots) {\n          if (other.getNextSpot(YutResult.DO) == spot) {\n            spot.setPrevSpot(other);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  public BoardType getType() {\n    return type;\n  }\n\n  public List<Spot> getSpots() {\n    return Collections.unmodifiableList(spots);\n  }\n\n  public List<Line> getLines() {\n    return Collections.unmodifiableList(lines);\n  }\n\n  public List<Path> getPaths() {\n    return Collections.unmodifiableList(paths);\n  }\n\n  public Spot getStartSpot() {\n    return startSpot;\n  }\n\n  public Spot getFinishSpot() {\n    return finishSpot;\n  }\n\n  public void updateHorsePosition(Horse horse) {\n    Spot spot = horse.getCurrentSpot();\n    if (spot == null) {\n      return;\n    }\n\n    int spotId = spot.getId();\n    if (!horsePositions.containsKey(spotId)) {\n      horsePositions.put(spotId, new ArrayList<>());\n    }\n\n    // 기존 위치에서 제거\n    for (List<Horse> horses : horsePositions.values()) {\n      horses.remove(horse);\n    }\n\n    // 새 위치에 추가\n    horsePositions.get(spotId).add(horse);\n  }\n\n  public List<Horse> getHorsesAtSpot(Spot spot) {\n    if (spot == null) {\n      return Collections.emptyList();\n    }\n\n    int spotId = spot.getId();\n    if (!horsePositions.containsKey(spotId)) {\n      return Collections.emptyList();\n    }\n\n    return Collections.unmodifiableList(horsePositions.get(spotId));\n  }\n\n  public Spot getSpotById(int id) {\n    for (Spot spot : spots) {\n      if (spot.getId() == id) {\n        return spot;\n      }\n    }\n    return null;\n  }\n\n  public Spot calculateNextSpot(Spot currentSpot, YutResult result) {\n    // 출발 전인 경우\n    if (currentSpot == null) {\n      // 시작점에서 출발\n      return calculateFirstMove(result);\n    }\n\n    // 빽도인 경우\n    if (result == YutResult.BACKDO) {\n      // 시작점에서는 빽도 사용 불가\n      if (currentSpot.isStart()) {\n        return null;\n      }\n\n      // 이전 칸으로 이동\n      return currentSpot.getPrevSpot();\n    }\n\n    // 특별 경로 확인 (모서리에서의 지름길)\n    if (currentSpot.hasPath(result)) {\n      Path path = currentSpot.getNextPath(result);\n      return path.getFirstSpot();\n    }\n\n    // 기본 다음 칸 반환\n    return currentSpot.getNextSpot(result);\n  }\n\n  private Spot calculateFirstMove(YutResult result) {\n    // 출발점에서 윷 결과에 따라 이동 계산\n    switch (result) {\n      case BACKDO:\n        // 빽도는 출발에서는 이동 불가\n        return null;\n      case DO:\n      case GAE:\n      case GEOL:\n      case YUT:\n      case MO:\n        // 기본 경로로 이동\n        Path mainPath = paths.stream()\n            .filter(p -> !p.isShortcut() && \"main\".equals(p.getName()))\n            .findFirst()\n            .orElse(null);\n\n        if (mainPath == null) {\n          return null;\n        }\n\n        List<Spot> pathSpots = mainPath.getSpots();\n        int targetIndex = Math.min(result.getMoveCount(), pathSpots.size() - 1);\n        return pathSpots.get(targetIndex);\n      default:\n        return null;\n    }\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/Model/Board.java b/app/Model/Board.java
--- a/app/Model/Board.java	(revision a2f71a1a4a231ad0b1c08519befec09541864847)
+++ b/app/Model/Board.java	(date 1746178954523)
@@ -146,7 +146,18 @@
     // 특별 경로 확인 (모서리에서의 지름길)
     if (currentSpot.hasPath(result)) {
       Path path = currentSpot.getNextPath(result);
-      return path.getFirstSpot();
+      /* 새 로직
+   ① 먼저 대각선 ‘첫 칸’으로 진입
+   ② 남은 칸수만큼 Path 안에서 추가 이동
+*/
+      Spot first = path.getFirstSpot();             // 대각선 첫 칸
+      int remain = result.getMoveCount() - 1;    // 첫 칸을 이미 1칸 소비
+
+      if (remain == 0) return first;             // 도(1칸) 등
+
+// Path 내부 이동. 범위를 넘어가면 null → 추가 방어 필요하면 if문으로 체크
+      return path.getSpotAfterMove(first, remain);
+
     }
 
     // 기본 다음 칸 반환
Index: app/Model/Strategy/SquareBoardLayoutStrategy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.Model.Strategy;\n\nimport java.awt.Point;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport app.Model.Enum.BoardType;\nimport app.Model.Enum.YutResult;\nimport app.Model.Board;\nimport app.Model.Line;\nimport app.Model.Path;\nimport app.Model.Spot;\nimport app.View.BoardLayoutStrategy;\n\npublic class SquareBoardLayoutStrategy implements BoardLayoutStrategy {\n        @Override\n        public Board createBoard() {\n                List<Spot> spots = new ArrayList<>();\n                List<Line> lines = new ArrayList<>();\n                List<Path> paths = new ArrayList<>();\n\n                // 중심점과 화면 크기 설정\n                int centerX = 300;\n                int centerY = 300;\n                int boardSize = 400; // 보드 전체 크기\n                int gridSize = boardSize / 5; // 격자 간격\n\n                // 출발/도착 지점을 포함한 모서리 지점 (더 크게 표시)\n                Spot startSpot = new Spot(0, new Point(centerX - boardSize / 2, centerY + boardSize / 2), true, true,\n                                false);\n                Spot corner1 = new Spot(5, new Point(centerX - boardSize / 2, centerY - boardSize / 2), true, false,\n                                false);\n                Spot corner2 = new Spot(10, new Point(centerX + boardSize / 2, centerY - boardSize / 2), true, false,\n                                false);\n                Spot corner3 = new Spot(15, new Point(centerX + boardSize / 2, centerY + boardSize / 2), true, false,\n                                false);\n\n                // 중앙 지점\n                Spot center = new Spot(20, new Point(centerX, centerY), true, false, false);\n\n                // 도착 지점 (출발 지점 옆)\n                // Spot finishSpot = new Spot(29, new Point(centerX - boardSize / 2 + gridSize,\n                // centerY + boardSize / 2), false,\n                // false, true);\n                // Spot finishSpot = new Spot(29, new Point(centerX - boardSize / 2, centerY +\n                // boardSize / 2), true, false, true);\n                Spot finishSpot = new Spot(29,\n                                new Point(centerX - boardSize / 2 - gridSize / 2,\n                                                centerY + boardSize / 2 + gridSize / 2),\n                                false, false, true);\n\n                // 모서리 지점 추가\n                spots.add(startSpot);\n                spots.add(corner1);\n                spots.add(corner2);\n                spots.add(corner3);\n                spots.add(center);\n                spots.add(finishSpot);\n\n                // 왼쪽 변 (시작점에서 위쪽 모서리까지의 경로)\n                Spot left1 = new Spot(1, new Point(centerX - boardSize / 2, centerY + boardSize / 2 - gridSize), false,\n                                false,\n                                false);\n                Spot left2 = new Spot(2, new Point(centerX - boardSize / 2, centerY + boardSize / 2 - 2 * gridSize),\n                                false,\n                                false, false);\n                Spot left3 = new Spot(3, new Point(centerX - boardSize / 2, centerY + boardSize / 2 - 3 * gridSize),\n                                false,\n                                false, false);\n                Spot left4 = new Spot(4, new Point(centerX - boardSize / 2, centerY + boardSize / 2 - 4 * gridSize),\n                                false,\n                                false, false);\n\n                // 위쪽 변 (왼쪽 모서리에서 오른쪽 모서리까지의 경로)\n                Spot top1 = new Spot(6, new Point(centerX - boardSize / 2 + gridSize, centerY - boardSize / 2), false,\n                                false,\n                                false);\n                Spot top2 = new Spot(7, new Point(centerX - boardSize / 2 + 2 * gridSize, centerY - boardSize / 2),\n                                false,\n                                false, false);\n                Spot top3 = new Spot(8, new Point(centerX - boardSize / 2 + 3 * gridSize, centerY - boardSize / 2),\n                                false,\n                                false, false);\n                Spot top4 = new Spot(9, new Point(centerX - boardSize / 2 + 4 * gridSize, centerY - boardSize / 2),\n                                false,\n                                false, false);\n\n                // 오른쪽 변 (오른쪽 위 모서리에서 오른쪽 아래 모서리까지의 경로)\n                Spot right1 = new Spot(11, new Point(centerX + boardSize / 2, centerY - boardSize / 2 + gridSize),\n                                false, false,\n                                false);\n                Spot right2 = new Spot(12, new Point(centerX + boardSize / 2, centerY - boardSize / 2 + 2 * gridSize),\n                                false,\n                                false, false);\n                Spot right3 = new Spot(13, new Point(centerX + boardSize / 2, centerY - boardSize / 2 + 3 * gridSize),\n                                false,\n                                false, false);\n                Spot right4 = new Spot(14, new Point(centerX + boardSize / 2, centerY - boardSize / 2 + 4 * gridSize),\n                                false,\n                                false, false);\n\n                // 아래쪽 변 (오른쪽 아래 모서리에서 시작점까지의 경로)\n                Spot bottom1 = new Spot(16, new Point(centerX + boardSize / 2 - gridSize, centerY + boardSize / 2),\n                                false,\n                                false, false);\n                Spot bottom2 = new Spot(17, new Point(centerX + boardSize / 2 - 2 * gridSize, centerY + boardSize / 2),\n                                false,\n                                false, false);\n                Spot bottom3 = new Spot(18, new Point(centerX + boardSize / 2 - 3 * gridSize, centerY + boardSize / 2),\n                                false,\n                                false, false);\n                Spot bottom4 = new Spot(19, new Point(centerX + boardSize / 2 - 4 * gridSize, centerY + boardSize / 2),\n                                false,\n                                false, false);\n\n                // 왼쪽 아래 대각선 (시작점에서 중앙까지의 경로)\n                Spot diag1_1 = new Spot(21,\n                                new Point(centerX - boardSize / 2 + gridSize, centerY + boardSize / 2 - gridSize),\n                                false, false, false);\n                Spot diag1_2 = new Spot(22,\n                                new Point(centerX - boardSize / 2 + 2 * gridSize,\n                                                centerY + boardSize / 2 - 2 * gridSize),\n                                false, false,\n                                false);\n\n                // 왼쪽 위 대각선 (왼쪽 위 모서리에서 중앙까지의 경로)\n                Spot diag2_1 = new Spot(23,\n                                new Point(centerX - boardSize / 2 + gridSize, centerY - boardSize / 2 + gridSize),\n                                false, false, false);\n                Spot diag2_2 = new Spot(24,\n                                new Point(centerX - boardSize / 2 + 2 * gridSize,\n                                                centerY - boardSize / 2 + 2 * gridSize),\n                                false, false,\n                                false);\n\n                // 오른쪽 위 대각선 (오른쪽 위 모서리에서 중앙까지의 경로)\n                Spot diag3_1 = new Spot(25,\n                                new Point(centerX + boardSize / 2 - gridSize, centerY - boardSize / 2 + gridSize),\n                                false, false, false);\n                Spot diag3_2 = new Spot(26,\n                                new Point(centerX + boardSize / 2 - 2 * gridSize,\n                                                centerY - boardSize / 2 + 2 * gridSize),\n                                false, false,\n                                false);\n\n                // 오른쪽 아래 대각선 (오른쪽 아래 모서리에서 중앙까지의 경로)\n                Spot diag4_1 = new Spot(27,\n                                new Point(centerX + boardSize / 2 - gridSize, centerY + boardSize / 2 - gridSize),\n                                false, false, false);\n                Spot diag4_2 = new Spot(28,\n                                new Point(centerX + boardSize / 2 - 2 * gridSize,\n                                                centerY + boardSize / 2 - 2 * gridSize),\n                                false, false,\n                                false);\n\n                // 모든 일반 지점 추가\n                spots.add(left1);\n                spots.add(left2);\n                spots.add(left3);\n                spots.add(left4);\n                spots.add(top1);\n                spots.add(top2);\n                spots.add(top3);\n                spots.add(top4);\n                spots.add(right1);\n                spots.add(right2);\n                spots.add(right3);\n                spots.add(right4);\n                spots.add(bottom1);\n                spots.add(bottom2);\n                spots.add(bottom3);\n                spots.add(bottom4);\n                spots.add(diag1_1);\n                spots.add(diag1_2);\n                spots.add(diag2_1);\n                spots.add(diag2_2);\n                spots.add(diag3_1);\n                spots.add(diag3_2);\n                spots.add(diag4_1);\n                spots.add(diag4_2);\n\n                // 외곽 선 연결\n                // 왼쪽 변\n                lines.add(new Line(startSpot, left1));\n                lines.add(new Line(left1, left2));\n                lines.add(new Line(left2, left3));\n                lines.add(new Line(left3, left4));\n                lines.add(new Line(left4, corner1));\n\n                // 위쪽 변\n                lines.add(new Line(corner1, top1));\n                lines.add(new Line(top1, top2));\n                lines.add(new Line(top2, top3));\n                lines.add(new Line(top3, top4));\n                lines.add(new Line(top4, corner2));\n\n                // 오른쪽 변\n                lines.add(new Line(corner2, right1));\n                lines.add(new Line(right1, right2));\n                lines.add(new Line(right2, right3));\n                lines.add(new Line(right3, right4));\n                lines.add(new Line(right4, corner3));\n\n                // 아래쪽 변\n                lines.add(new Line(corner3, bottom1));\n                lines.add(new Line(bottom1, bottom2));\n                lines.add(new Line(bottom2, bottom3));\n                lines.add(new Line(bottom3, bottom4));\n                lines.add(new Line(bottom4, startSpot));\n\n                // 대각선 연결\n                // 왼쪽 아래 대각선\n                lines.add(new Line(startSpot, diag1_1));\n                lines.add(new Line(diag1_1, diag1_2));\n                lines.add(new Line(diag1_2, center));\n\n                // 왼쪽 위 대각선\n                lines.add(new Line(corner1, diag2_1));\n                lines.add(new Line(diag2_1, diag2_2));\n                lines.add(new Line(diag2_2, center));\n\n                // 오른쪽 위 대각선\n                lines.add(new Line(corner2, diag3_1));\n                lines.add(new Line(diag3_1, diag3_2));\n                lines.add(new Line(diag3_2, center));\n\n                // 오른쪽 아래 대각선\n                lines.add(new Line(corner3, diag4_1));\n                lines.add(new Line(diag4_1, diag4_2));\n                lines.add(new Line(diag4_2, center));\n\n                // 시작점과 도착점 연결 (시작점에서 한 번에 도착점으로)\n                lines.add(new Line(startSpot, finishSpot));\n\n                // // 중앙에서 도착점 연결\n                // lines.add(new Line(center, finishSpot));\n\n                // 경로 설정\n                // 기본 외곽 경로\n                Path mainPath = new Path(\"main\", false);\n                mainPath.addSpot(startSpot);\n                mainPath.addSpot(left1);\n                mainPath.addSpot(left2);\n                mainPath.addSpot(left3);\n                mainPath.addSpot(left4);\n                mainPath.addSpot(corner1);\n                mainPath.addSpot(top1);\n                mainPath.addSpot(top2);\n                mainPath.addSpot(top3);\n                mainPath.addSpot(top4);\n                mainPath.addSpot(corner2);\n                mainPath.addSpot(right1);\n                mainPath.addSpot(right2);\n                mainPath.addSpot(right3);\n                mainPath.addSpot(right4);\n                mainPath.addSpot(corner3);\n                mainPath.addSpot(bottom1);\n                mainPath.addSpot(bottom2);\n                mainPath.addSpot(bottom3);\n                mainPath.addSpot(bottom4);\n                mainPath.addSpot(startSpot);\n                // 한 바퀴 돌면 도착점으로\n                mainPath.addSpot(finishSpot);\n                paths.add(mainPath);\n\n                // 대각선 경로 - 왼쪽 아래에서 중앙\n                Path diagPath1 = new Path(\"diag1\", true);\n                diagPath1.addSpot(startSpot);\n                diagPath1.addSpot(diag1_1);\n                diagPath1.addSpot(diag1_2);\n                diagPath1.addSpot(center);\n                paths.add(diagPath1);\n\n                // 대각선 경로 - 왼쪽 위에서 중앙\n                Path diagPath2 = new Path(\"diag2\", true);\n                diagPath2.addSpot(corner1);\n                diagPath2.addSpot(diag2_1);\n                diagPath2.addSpot(diag2_2);\n                diagPath2.addSpot(center);\n                paths.add(diagPath2);\n\n                // 대각선 경로 - 오른쪽 위에서 중앙\n                Path diagPath3 = new Path(\"diag3\", true);\n                diagPath3.addSpot(corner2);\n                diagPath3.addSpot(diag3_1);\n                diagPath3.addSpot(diag3_2);\n                diagPath3.addSpot(center);\n                paths.add(diagPath3);\n\n                // 대각선 경로 - 오른쪽 아래에서 중앙\n                Path diagPath4 = new Path(\"diag4\", true);\n                diagPath4.addSpot(corner3);\n                diagPath4.addSpot(diag4_1);\n                diagPath4.addSpot(diag4_2);\n                diagPath4.addSpot(center);\n                paths.add(diagPath4);\n\n                // 도착 경로 - 중앙에서 도착점\n                Path finishPath = new Path(\"finish\", false);\n                finishPath.addSpot(center);\n                finishPath.addSpot(finishSpot);\n                paths.add(finishPath);\n\n                // 도착 경로 - 시작점에서 도착점 (직접 이동)\n                Path directFinishPath = new Path(\"directFinish\", false);\n                directFinishPath.addSpot(startSpot);\n                directFinishPath.addSpot(finishSpot);\n                paths.add(directFinishPath);\n\n                // 다음 칸 연결 설정 (선 그리기보다 실제 이동 가능 경로 설정)\n                // 기본 경로 연결\n                for (int i = 0; i < mainPath.getSpots().size() - 1; i++) {\n                        Spot current = mainPath.getSpots().get(i);\n                        Spot next = mainPath.getSpots().get(i + 1);\n                        current.addNextSpot(YutResult.DO, next);\n                }\n\n                // 모서리에서 대각선 경로 연결 (일반 말 이동으로 들어갈 수 있는 경로)\n                startSpot.addNextPath(YutResult.DO, diagPath1);\n                corner1.addNextPath(YutResult.DO, diagPath2);\n                corner2.addNextPath(YutResult.DO, diagPath3);\n                corner3.addNextPath(YutResult.DO, diagPath4);\n\n                // 중앙에서 도착점 연결\n                center.addNextPath(YutResult.DO, finishPath);\n\n                // 시작점에서 도착점 직접 연결\n                startSpot.addNextPath(YutResult.MO, directFinishPath); // 모가 나오면 바로 도착\n\n                return new Board(BoardType.SQUARE, spots, lines, paths);\n        }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/Model/Strategy/SquareBoardLayoutStrategy.java b/app/Model/Strategy/SquareBoardLayoutStrategy.java
--- a/app/Model/Strategy/SquareBoardLayoutStrategy.java	(revision a2f71a1a4a231ad0b1c08519befec09541864847)
+++ b/app/Model/Strategy/SquareBoardLayoutStrategy.java	(date 1746178701544)
@@ -265,7 +265,6 @@
 
                 // 대각선 경로 - 왼쪽 아래에서 중앙
                 Path diagPath1 = new Path("diag1", true);
-                diagPath1.addSpot(startSpot);
                 diagPath1.addSpot(diag1_1);
                 diagPath1.addSpot(diag1_2);
                 diagPath1.addSpot(center);
@@ -273,7 +272,6 @@
 
                 // 대각선 경로 - 왼쪽 위에서 중앙
                 Path diagPath2 = new Path("diag2", true);
-                diagPath2.addSpot(corner1);
                 diagPath2.addSpot(diag2_1);
                 diagPath2.addSpot(diag2_2);
                 diagPath2.addSpot(center);
@@ -281,7 +279,6 @@
 
                 // 대각선 경로 - 오른쪽 위에서 중앙
                 Path diagPath3 = new Path("diag3", true);
-                diagPath3.addSpot(corner2);
                 diagPath3.addSpot(diag3_1);
                 diagPath3.addSpot(diag3_2);
                 diagPath3.addSpot(center);
@@ -289,7 +286,6 @@
 
                 // 대각선 경로 - 오른쪽 아래에서 중앙
                 Path diagPath4 = new Path("diag4", true);
-                diagPath4.addSpot(corner3);
                 diagPath4.addSpot(diag4_1);
                 diagPath4.addSpot(diag4_2);
                 diagPath4.addSpot(center);
@@ -297,7 +293,6 @@
 
                 // 도착 경로 - 중앙에서 도착점
                 Path finishPath = new Path("finish", false);
-                finishPath.addSpot(center);
                 finishPath.addSpot(finishSpot);
                 paths.add(finishPath);
 
@@ -327,6 +322,29 @@
                 // 시작점에서 도착점 직접 연결
                 startSpot.addNextPath(YutResult.MO, directFinishPath); // 모가 나오면 바로 도착
 
+                // ① mainPath(외곽) DO 링크 처리
+                for (int i = 0; i < mainPath.getSpots().size() - 1; i++) {
+                        Spot cur = mainPath.getSpots().get(i);
+                        Spot nxt = mainPath.getSpots().get(i + 1);
+                        cur.addNextSpot(YutResult.DO, nxt);
+                }
+
+                // ② 대각선·중앙→도착 경로도 같은 방식으로 묶어준다
+                /* mainPath 링크 뒤에 추가 */
+                linkPathSpots(diagPath1);
+                linkPathSpots(diagPath2);
+                linkPathSpots(diagPath3);
+                linkPathSpots(diagPath4);
+                linkPathSpots(finishPath);
+
                 return new Board(BoardType.SQUARE, spots, lines, paths);
         }
+
+        // util 메서드
+        private void linkPathSpots(Path p) {
+                List<Spot> list = p.getSpots();
+                for (int i = 0; i < list.size() - 1; i++) {
+                        list.get(i).addNextSpot(YutResult.DO, list.get(i + 1));
+                }
+        }
 }
\ No newline at end of file
